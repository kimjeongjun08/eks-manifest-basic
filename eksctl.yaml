apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: <eks_name>
  version: "1.32" #버전
  region: ap-northeast-2 #리전 
  
vpc:
  id: "<VPC_ID>"
  subnets:
    public:
      public-a: { id: } #기용영역 a에 위치한 퍼블릭 서브넷
      public-b: { id: } #가용영역 b에 위치한 퍼블릭 서브넷
    private:
      private-a: { id: } #가용영역 a에 위치한 프라이빗 서브넷
      private-b: { id: } #가용영역 b에 위치한 프라이빗 서브넷
iamIdentityMappings:
  - arn: arn:aws:iam::003150130236:role/admin #bastion이 현재 사용하는 profile
    groups:
      - system:masters
    username: admin
    noDuplicateARNs: true # prevents shadowing of ARNs
iam:
  withOIDC: true
  serviceAccounts:
  - metadata:
      name: appmesh-controller
      namespace: appmesh-system
    attachPolicyARNs:
      - "arn:aws:iam::aws:policy/AWSCloudMapFullAccess"
      - "arn:aws:iam::aws:policy/AWSAppMeshFullAccess"
  - metadata:
      name: aws-load-balancer-controller
      namespace: kube-system
    wellKnownPolicies:
      awsLoadBalancerController: true
  - metadata:
      name: ebs-csi-controller-sa
      namespace: kube-system
    wellKnownPolicies:
      ebsCSIController: true
  - metadata:
      name: efs-csi-controller-sa
      namespace: kube-system
    wellKnownPolicies:
      efsCSIController: true
  - metadata:
      name: external-dns
      namespace: kube-system
    wellKnownPolicies:
      externalDNS: true
  - metadata:
      name: cert-manager
      namespace: cert-manager
    wellKnownPolicies:
      certManager: true
  - metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels: {aws-usage: "cluster-ops"}
    wellKnownPolicies:
      autoScaler: true
  - metadata:
      name: build-service
      namespace: ci-cd
    wellKnownPolicies:
      imageBuilder: true
  - metadata:
      name: autoscaler-service
      namespace: kube-system
    attachPolicy:
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Action:
        - "autoscaling:DescribeAutoScalingGroups"
        - "autoscaling:DescribeAutoScalingInstances"
        - "autoscaling:DescribeLaunchConfigurations"
        - "autoscaling:DescribeTags"
        - "autoscaling:SetDesiredCapacity"
        - "autoscaling:TerminateInstanceInAutoScalingGroup"
        - "ec2:DescribeLaunchTemplateVersions"
        Resource: '*'
managedNodeGroups:
  - name: <nodegroup_name> #nodegroup 이름
    labels: { role: apps }
    instanceType: t3.medium
    instanceName: <node_name>
    desiredCapacity: 2
    minSize: 2
    maxSize: 2
    privateNetworking: true
    volumeType: gp2
    volumeEncrypted: true
    subnets:
      - private-a
      - private-b
    tags:
      k8s.io/cluster-autoscaler/enabled: "true"
      k8s.io/cluster-autoscaler/demo-staging-cluster: "owned"
    iam:
      withAddonPolicies:
        imageBuilder: true
        externalDNS: true
        certManager: true
